nav
	.controllers-types(style='float: left')
		.field
			input(type='text', placeholder='type min', value='2')#type-min

		.field
			input(type='text', placeholder='type max', value='4')#type-max

		.field
			select#types
				option(value='kbps') KBPS
				option(value='icmp') ICMP
				option(value='tcp') TCP
				option(value='snmp') SNMP

	.controllers-ifaces(style='float: right')
		.field
			select#iface

#container(style="min-width: 900px; height: 400px; margin: 0 auto")
script(type='text/javascript' src='http://code.highcharts.com/stock/highstock.js')
script(type='text/javascript' src='http://code.highcharts.com/stock/modules/exporting.js')
h1#ifDescr(style="text-align:center")
#container(style="height: 400px; min-width: 900px")

script(type='text/javascript').
	$(function () { 
		
		//populate ifaces options
		$.get('/metrics', function(data){
			for(var i=1 ; i <= data.ifNumber.value; i++)
			{
				$('#iface').append('<option value='+i+'>iface '+i+'</option>');
			}
		});

		$('#type-min').keyup(function(e)
		{
			if(/\D/g.test(this.value))
			{
				this.value = this.value.replace(/\D/g, '');
			}
		});

		$('#type-max').keyup(function(e)
		{
			if(/\D/g.test(this.value))
			{
				this.value = this.value.replace(/\D/g, '');
			}
		});

		var monitor = function(type){
			if($('#type-min').val() > type || $('#type-max').val() < type)
			{
				alert('Its a trap');
			}
		};

		var seriesOptions = [],
			seriesCounter = 0;

			seriesOptions[0] = {
				name: "KBPS",
				data: []
			};
			seriesOptions[1] = {
				name: "ICMP",
				data: []
			};
			seriesOptions[2] = {
				name: "TCP",
				data: []
			};
			seriesOptions[3] = {
				name: "SNMP",
				data: []
			};	


				var ch = new Highcharts.StockChart({

					chart: {
						renderTo: 'container',

						events: {
							load: function () {

								// set up the updating of the chart each second

									var kbps = this.series[0];
									var icmp = this.series[1];
									var tcp  = this.series[2];
									var snmp = this.series[3];

									var monitorAux = 0;

									setInterval(function () {
										$.getJSON('/chart?ifNumber='+$('#iface').val(),    function (data) {
											var time = new Date();
											$("#ifDescr").html(data.ifDescr.value);
											kbps.addPoint([time.getTime(), data.kbps]);
											icmp.addPoint([time.getTime(), data.icmp]);
											tcp.addPoint([time.getTime(),  data.tcp]);
											snmp.addPoint([time.getTime(), data.snmp]);
											if(monitorAux % 2 == 0){
												if($('#types').val() == 'kbps')
													monitor(data.kbps);
												
												else if($('#types').val() == 'icmp')
													monitor(data.icmp);
												
												else if($('#types').val() == 'tcp')
													monitor(data.tcp);
												
												else if($('#types').val() == 'snmp')
													monitor(data.snmp);

												});
											}
											monitorAux ++;
									}, 1000);
								}
						}
					},
					rangeSelector: {
						selected: 4
					},

					yAxis: {
						labels: {
							formatter: function () {
								return (this.value > 0 ? ' + ' : '') + this.value + '%';
							}
						},
						plotLines: [{
							value: 0,
							width: 2,
							color: 'silver'
						}]
					},

					plotOptions: {
						series: {
							compare: 'percent'
						}
					},

					tooltip: {
						pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',
						valueDecimals: 2
					},

					series: seriesOptions
				});
	});
