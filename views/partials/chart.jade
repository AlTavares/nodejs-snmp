
script(type='text/javascript' src='http://code.highcharts.com/stock/highstock.js')
script(type='text/javascript' src='http://code.highcharts.com/stock/modules/exporting.js')

h1#ifDescr(style="text-align:center")
nav
	.controllers(style='float: right')
		.field
			select#iface.form-control

#container(style="min-width: 900px; height: 400px; margin: 0 auto")

script(type='text/javascript').
	$(function () { 
		var seriesOptions = [],
			oldIndex = 0;

			seriesOptions[0] = {
				name: "KBPS",
				data: []
			};
			seriesOptions[1] = {
				name: "ICMP",
				data: []
			};
			seriesOptions[2] = {
				name: "TCP",
				data: []
			};
			seriesOptions[3] = {
				name: "SNMP",
				data: []
			};	


				var ch = new Highcharts.StockChart({

					chart: {
						renderTo: 'container',
						animation: {
			                duration: 1500,
			            },

						events: {
							load: function () {

								// set up the updating of the chart each second

									var kbps = this.series[0];
									var icmp = this.series[1];
									var tcp  = this.series[2];
									var snmp = this.series[3];
									setInterval(function () {
										var index = $('#iface').val();
										$.getJSON('/chart?ifNumber='+ index,    function (data) {
											var time = new Date();
											console.log(kbps.data[0]);
											$("#ifDescr").html(data.ifDescr.value);
											if (oldIndex != index) {
												kbps.setData([], false);
												icmp.setData([], false);
												tcp.setData([], false);
												snmp.setData([], false);

												oldIndex = index;
											};
											kbps.addPoint([time.getTime(), data.kbps],false);
											icmp.addPoint([time.getTime(), data.icmp],false);
											tcp.addPoint([time.getTime(),  data.tcp],false);
											snmp.addPoint([time.getTime(), data.snmp],true); //redraws only in the last point
										});
									}, 1000);
								}
						}
					},
					rangeSelector: {
						selected: 4
					},

					yAxis: {
						labels: {
							formatter: function () {
								return (this.value > 0 ? ' + ' : '') + this.value + '%';
							}
						},
						plotLines: [{
							value: 0,
							width: 2,
							color: 'silver'
						}]
					},

					plotOptions: {
						series: {
							compare: 'percent'
						}
					},

					tooltip: {
						pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',
						valueDecimals: 2
					},

					series: seriesOptions
				});
	});
